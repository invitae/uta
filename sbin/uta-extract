#!/usr/bin/env bash

# Extract data from NCBI files into intermediate files.

ncbi_dir=$1
loading_dir=$2
logs_dir=$3

if [ -z "$ncbi_dir" ] || [ -z "$loading_dir" ] || [ -z "$logs_dir" ]
then
    echo 'Usage: sbin/uta-extract <ncbi_dir> <loading_dir> <logs_dir>'
    exit 1
fi

# genes
sbin/ncbi-parse-geneinfo $ncbi_dir/gene/DATA/GENE_INFO/Mammalia/Homo_sapiens.gene_info.gz | \
    gzip -c > "$loading_dir/geneinfo.gz" 2>&1 | tee "$logs_dir/ncbi-parse-geneinfo.log"

# transcript protein associations
sbin/ncbi-parse-gene2refseq $ncbi_dir/gene/DATA/gene2accession.gz | gzip -c > "$loading_dir/assocacs.gz" 2>&1 | \
    tee "$logs_dir/ncbi-fetch-assoc-acs.log"

# parse transcript info from GBFF input files
GBFF_files=$(ls $ncbi_dir/refseq/H_sapiens/mRNA_Prot/human.*.rna.gbff.gz)
sbin/ncbi-parse-gbff "$GBFF_files" | gzip -c > "$loading_dir/txinfo.gz" 2>&1 | \
    tee "$logs_dir/ncbi-parse-gbff.log"

# parse alignments from GFF input files
GFF_files=$(ls $ncbi_dir/genomes/refseq/vertebrate_mammalian/Homo_sapiens/all_assembly_versions/GCF_000001405*/GCF_*_genomic.gff.gz)
sbin/ncbi_parse_genomic_gff.py "$GFF_files" | gzip -c > "$loading_dir/exonsets.gz" 2>&1 | \
    tee "$logs_dir/ncbi-parse-genomic-gff.log"

# generate seqinfo files from exonsets
sbin/exonset-to-seqinfo -o NCBI "$loading_dir/exonsets.gz" | gzip -c > "$loading_dir/seqinfo.gz" 2>&1 | \
    tee "$logs_dir/exonset-to-seqinfo.log"
